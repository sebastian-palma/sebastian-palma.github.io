<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sebasti√°n Palma</title>
        <link>http%3A//127.0.0.1%3A1111</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http%3A//127.0.0.1%3A1111/categories/database/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 20 Sep 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>The SQL Join clause</title>
                <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
                <link>http%3A//127.0.0.1%3A1111/the-sql-join-clause/</link>
                <guid>http%3A//127.0.0.1%3A1111/the-sql-join-clause/</guid>
                <description>&lt;br &#x2F;&gt;
&lt;br &#x2F;&gt;
&lt;p&gt;The term &lt;em&gt;join&lt;&#x2F;em&gt; concerning to databases appeared with the publishing of the paper &amp;quot;A Relational Model of Data for Large Shared Data Banks&amp;quot; by Edgar F. Codd (IBM Research Laboratory) in June of 1970. After years working and dealing with data banks using the Hierarchical and Network data models, and seeing the inflexibility that programs developed at that time presented for their maintainers.&lt;&#x2F;p&gt;
&lt;p&gt;In the paper, Codd enumerates several problems with the data and access path dependencies in the systems and introduces his idea of a relational view of data accompanied by the early definitions of the normal form to avoid redundancy and get consistency.&lt;&#x2F;p&gt;
&lt;p&gt;The term relation is the main point from his work and is what we use today when working with relational databases applying the relational model. The elimination of non-simple domains (structures holding a single set of data, e.g a column) by taking its primary key and expanding each of the subordinate relations by inserting the primary key is what he called normalization.&lt;&#x2F;p&gt;
&lt;p&gt;Considering the following example he presents the differences between an un-normalized set and a normalized set:&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;jobhistory&lt;&#x2F;em&gt; and &lt;em&gt;children&lt;&#x2F;em&gt; are non simple domains of the relation &lt;em&gt;employee&lt;&#x2F;em&gt;. &lt;em&gt;salaryhistory&lt;&#x2F;em&gt; is a non simple domain of the relation &lt;em&gt;jobhistory&lt;&#x2F;em&gt;.&amp;quot;&lt;&#x2F;p&gt;
&lt;br &#x2F;&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\text{employee}\\
\text{|}\\
\text{-----------------------------------------------------------}\\
\text{|}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\text{|}\\
\text{jobhistory}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\text{children}\\
\text{|}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
\text{salaryhistory}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;&#x2F;script&gt;
&lt;br &#x2F;&gt;
&lt;p&gt;Un-normalized set:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;employee~(\textbf{man}\#,~name,~birthdate,~jobhistory,~children)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
jobhistory~(jobdate,~title,~salaryhistory)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
salaryhistory~(salarydate,~salary)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
children~(childname,~birthyear)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\&lt;&#x2F;script&gt;
&lt;p&gt;Normalized set:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;employee^{\prime}~(\textbf{man}\#,~name,~birthdate)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
jobhistory^{\prime}~(\textbf{man}\#,~jobdate,~title)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
salaryhistory^{\prime}~(\textbf{man}\#,~jobdate,~salarydate,~salary)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
children^{\prime}~(\textbf{man}\#,~childname,~birthyear)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\&lt;&#x2F;script&gt;
&lt;br&gt;
&lt;p&gt;The normalization starts by taking the primary key of the topmost relation and insert it into the immediately subordinate relations. Now, the primary key of each expanded relation is the primary key before expansion augmented by the primary key copied down from the parent relation. After that, all nonsimple domains from the parent relation and the top node of the tree are removed. The subsequence of operations is then applied to each remaining sub-tree.&lt;&#x2F;p&gt;
&lt;p&gt;This eliminates duplicate data and adds simplicity not only for storage purposes, but also for the communication of bulk data between systems that use widely different representations of the data. &lt;&#x2F;p&gt;
&lt;p&gt;The term &lt;em&gt;relation&lt;&#x2F;em&gt; is presented as the core of the paper (with the term relation in its mathematical sense):&lt;&#x2F;p&gt;
&lt;p&gt;\(  \)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given sets \( S_1,S_2,..., S_n \) (which not necessarily must be distinct), \( S \) is a relation on these \( n \) sets if it&#x27;s a set of \( n-tuples \) each of which has its first element from \( S_1 \), its second element from \( S_2 \), and so on.
&lt;br &#x2F;&gt;
&lt;br &#x2F;&gt;
\( R \) is a subset of the Cartesian product \( S_1 \) X \( S_2 \) X \( ... \) X \( S_n \).
&lt;br &#x2F;&gt;
&lt;br &#x2F;&gt;
Referring to \( S_1 \) as the \( jth \) domain of \( R \). \( R \) is said to have degree \( n \). Relations of degree 1 are often called \( unary \), degree 2 \( binary \), degree 3 \( ternary \) and degree \( n \) \( n-ary \).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Since relations are sets, all of the usual set operations apply to them. Codd explains 5 possible ones. Among them is the &lt;em&gt;join&lt;&#x2F;em&gt; operation.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we&#x27;re given two binary relations, with a domain in common. Under what circumstances can we combine these relations to form a ternary relation which preserves all of the information in the given relations?&lt;&#x2F;p&gt;
&lt;p&gt;There are two relations \( R \) and \( S \), which can be joined without loss of information.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;\( R \)&lt;&#x2F;th&gt;&lt;th&gt;(supplier&lt;&#x2F;th&gt;&lt;th&gt;part)&lt;&#x2F;th&gt;&lt;th&gt;\( S \)&lt;&#x2F;th&gt;&lt;th&gt;(part&lt;&#x2F;th&gt;&lt;th&gt;project)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;A binary relation \( R \) is &lt;em&gt;joinable&lt;&#x2F;em&gt; with a binary relation \( S \) if there exists a ternary relation \( U \) such that \( a_{12}(U) = R \) and \( a_{23}(U) = S \). Any one of these ternary relations is called a join of \( R \) with \( S \).&lt;&#x2F;p&gt;
&lt;p&gt;If \( R \), \( S \) are binary relations such that \( a_2(R) = a_1(S) \), then \( R \) is able to be joined with \( S \).&lt;&#x2F;p&gt;
&lt;p&gt;One join that always exists in such a case is the &lt;em&gt;natural join&lt;&#x2F;em&gt; of \( R \) with \( S \) defined as:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;R * S = { (a, b, c):R(a, b) \ \wedge S(b, c) }&lt;&#x2F;script&gt;
&lt;p&gt;Where \( R(a, b) \) has the value &lt;em&gt;true&lt;&#x2F;em&gt; if \( (a, b) \) is a member of \( R \) and similarly for \( S(b, c) \). It&#x27;s immediate that&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;a_{12}(R * S) = R&lt;&#x2F;script&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;a_{23}(R * S) = S&lt;&#x2F;script&gt;
&lt;h5 id=&quot;what-s-a-join&quot;&gt;What&#x27;s a Join?&lt;&#x2F;h5&gt;
&lt;p&gt;In simple words, a &lt;em&gt;join&lt;&#x2F;em&gt; is a constituent component of a statement and&#x2F;or a query used to collate the data (or rows) from one or more tables  based on a common field between them. &lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s the act of connecting related tables or sets of data based on key values (column, column value). For it to work in a relational model is needed that all tables contain a unique identifier (primary key), and this way any related table contains a copy (same value, same data type) of that unique identifier (foreign key).&lt;&#x2F;p&gt;
&lt;h5 id=&quot;theta-join-equijoin&quot;&gt;Theta Join. Equijoin&lt;&#x2F;h5&gt;
&lt;p&gt;To start explaining what the &lt;em&gt;theta join&lt;&#x2F;em&gt; is, first is needed to know about &lt;em&gt;the product&lt;&#x2F;em&gt;.  The product is (as its name says) the product between two tables \( R \) and \( S \), expressed as \( R \times S \). Pretty much as the Cartesian product of both \( R \) and \( S \) is obtained.&lt;&#x2F;p&gt;
&lt;p&gt;\( R \times S \) forms a table by concatenating all rows from the table \( R \) with all rows from the table \( S \). The columns are all the columns of both \( R \) and \( S \) tables correspondingly, and the total of rows is the sum of the total rows in \( R \) and the total rows in \( S \).&lt;&#x2F;p&gt;
&lt;p&gt;The most common way to get a product table is by using a &lt;em&gt;nested loop&lt;&#x2F;em&gt; algorithm. To do so the first row of \( R \) it&#x27;s merged with the first row of \( S \), then with the second row of \( S \). This way subsequently until reaching the last element in \( S \).  The operation is repeated with the second row of \( R \), the third, fourth, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The total rows of &lt;em&gt;the product&lt;&#x2F;em&gt; of \( R \times S \) are \( x \times y \) rows, where \( x \) is the total of rows in \( R \) and \( y \) is the total of rows in \( S \). As an example, the total of rows in users is 6 and the total of rows in posts is 15, &lt;em&gt;the product&lt;&#x2F;em&gt; contains 90 rows.&lt;&#x2F;p&gt;
&lt;p&gt;The result of executing a &lt;em&gt;select&lt;&#x2F;em&gt; operation on &lt;em&gt;the product&lt;&#x2F;em&gt; is represented as the &lt;em&gt;theta join&lt;&#x2F;em&gt;. The symbol used to represent it is \( |x|_0 \).&lt;&#x2F;p&gt;
&lt;p&gt;For the tables \( R \) and \( S \), the theta join is defined as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
R~|x|_0~S~=~\sigma_0(R~\times~S)
$$&lt;&#x2F;p&gt;
&lt;p&gt;For instance, we can get the rows from the product of \( R \) and \( S \) where &lt;em&gt;words_count&lt;&#x2F;em&gt; is greater than 2771 (second post). This is represented as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\sigma_{words_count~&amp;gt;~2771}~(users~\times~posts)
$$&lt;&#x2F;p&gt;
&lt;p&gt;In PostgreSQL this might be as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;CROSS JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; words_count &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff0000;&quot;&gt;2771&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;cross join&lt;&#x2F;em&gt; clause used allows us to produce the Cartesian product between two or more tables.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;em&gt;theta join&lt;&#x2F;em&gt; is then the result of a selection operation in &lt;em&gt;the product&lt;&#x2F;em&gt; by using any binary relational operator ($&amp;gt; \), \( \geqslant \), \( = \), \( \neq \), \( \leqslant \), \( &amp;lt;$)&lt;&#x2F;p&gt;
&lt;p&gt;If the operator used is equality (\( = \)), then the join is also called &lt;em&gt;equijoin&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;natural-join&quot;&gt;Natural Join&lt;&#x2F;h5&gt;
&lt;p&gt;The natural join is the easiest part to start explaining the concept of SQL join. Given the query &amp;quot;Get all user names and post titles from users who have written a post&amp;quot; the following SQL returns what we need:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; name, title
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users, posts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.user_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts.user_id;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we&#x27;re doing here is trying to match a certain condition to pick up the rows from both tables when it succeeds. The condition required is &lt;em&gt;users.user_id&lt;&#x2F;em&gt; must be equal to &lt;em&gt;posts.user_id&lt;&#x2F;em&gt;. These two columns are the only ones in both tables with the same name. And, for the sake of simplicity SQL supports an operation called &lt;em&gt;natural join&lt;&#x2F;em&gt; (and several different ways to join information from 1 or more tables).&lt;&#x2F;p&gt;
&lt;p&gt;The last query was nothing more than a Cartesian product with a where clause where we extracted information from two tables, without really creating a relationship between them. What we need now is to get the job done but using a join clause.&lt;&#x2F;p&gt;
&lt;p&gt;The natural join operation receives two (or more) tables and returns a third table as its result, often referred to as a &amp;quot;logical table&amp;quot;. It considers only those pairs of rows with the same value on those columns in both tables, as opposed to the Cartesian product between two tables, which links each row of the table to the left of the operator with every row of the table to the right of the operator.&lt;&#x2F;p&gt;
&lt;p&gt;The example shown before can be expressed using the natural join operation as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; name, title
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;title&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Diego Barton&lt;&#x2F;td&gt;&lt;td&gt;OpenAI Hide-and-Seek Findings, the Systems Perspective&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;Lilly Singhs Late Night Show Is an Uneasy Compromise for Everyone&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;Can You Trust Facebook with your Love Life?&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Diego Barton&lt;&#x2F;td&gt;&lt;td&gt;How Netflix Binges and Google Translate Helped Me Find Love&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Earlie Harber&lt;&#x2F;td&gt;&lt;td&gt;The Mystical Side of A.I.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;Start Before You&#x27;re Ready&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Landon Legros&lt;&#x2F;td&gt;&lt;td&gt;Why Reading Poetry Can Make You a Better Leader&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Douglas Bartoletti&lt;&#x2F;td&gt;&lt;td&gt;Stop Copying Your Heroes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;The Case for Being a Multi-Hyphenate&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Landon Legros&lt;&#x2F;td&gt;&lt;td&gt;To Do Better Work, Change Your Environment&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;My Startup Could&#x27;ve Exploited Gig Economy Workers‚Ää-‚ÄäHeres Why We Didn&#x27;t&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Landon Legros&lt;&#x2F;td&gt;&lt;td&gt;The Women Behind Controversial At-Home Rape Kits Speak Out&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Douglas Bartoletti&lt;&#x2F;td&gt;&lt;td&gt;Why Your Startup Isn&#x27;t Being Funded and What to Do About It&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Diego Barton&lt;&#x2F;td&gt;&lt;td&gt;Daredevil Unicorns: Why Juul, Uber, And Other Companies Play With Fire&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;The Surprisingly Effective Impact of Becoming a Connector Manager&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;It results in the same, but it considers only those pairs of rows with both users and posts having the same values for the column in common - &lt;em&gt;user_id&lt;&#x2F;em&gt;. Giving a table with only 15 rows where there are no repeated values, nor for users, nor posts.&lt;&#x2F;p&gt;
&lt;p&gt;The order in which the columns are returned when it isn&#x27;t specified follows a particular rule; first are the columns in common with the tables used, second the columns existing only to the left of the &lt;em&gt;natural join&lt;&#x2F;em&gt; sentence and lastly the columns existing only in the table to the right of the operator. The result of a &lt;em&gt;natural join&lt;&#x2F;em&gt; is a new relation.&lt;&#x2F;p&gt;
&lt;p&gt;The query is also executed in a specific order, first by its &lt;em&gt;from&lt;&#x2F;em&gt; clause, following by the &lt;em&gt;where&lt;&#x2F;em&gt; clause and then &lt;em&gt;select&lt;&#x2F;em&gt; one.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff0000;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;user_id&lt;&#x2F;th&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;post_id&lt;&#x2F;th&gt;&lt;th&gt;title&lt;&#x2F;th&gt;&lt;th&gt;words_count&lt;&#x2F;th&gt;&lt;th&gt;publishing_year&lt;&#x2F;th&gt;&lt;th&gt;rating&lt;&#x2F;th&gt;&lt;th&gt;category_id&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Diego B.&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;OpenAI Hide-and...&lt;&#x2F;td&gt;&lt;td&gt;1884&lt;&#x2F;td&gt;&lt;td&gt;2017&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Salina H.&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Lilly Singhs Late...&lt;&#x2F;td&gt;&lt;td&gt;2771&lt;&#x2F;td&gt;&lt;td&gt;2016&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Salina H.&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Can You Trust...&lt;&#x2F;td&gt;&lt;td&gt;3519&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Diego B.&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;How Netflix Binges...&lt;&#x2F;td&gt;&lt;td&gt;2643&lt;&#x2F;td&gt;&lt;td&gt;2018&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Earlie H.&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;The Mystical Side...&lt;&#x2F;td&gt;&lt;td&gt;2819&lt;&#x2F;td&gt;&lt;td&gt;2016&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;code&gt;from&lt;&#x2F;code&gt; clause can easily be chained for multiple table names, following the form:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\text{SELECT}~A_1,~A_2,~...,~A_n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
\text{FROM}~r_1~\text{NATURAL JOIN}~r_2~\text{NATURAL JOIN}~...~\text{NATURAL JOIN}~r_m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
\text{WHERE}~P;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\&lt;&#x2F;script&gt;
&lt;p&gt;Consider the case where we want to add the category of those posts written by each user. It&#x27;d involve adding a third table to the operation. This can be done as seen before, appending the needed table name to the &lt;em&gt;from&lt;&#x2F;em&gt; clause. A &lt;em&gt;natural join&lt;&#x2F;em&gt; will first compute the table to the left of the operator plus the first table to the right of the operator, resulting in a Cartesian product used to compute the &lt;em&gt;join&lt;&#x2F;em&gt; with the following table to the right of the &lt;em&gt;natural join&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.name, posts.title, categories.name
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts, categories
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts.category_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;categories.category_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff0000;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;title&lt;&#x2F;th&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Diego Barton&lt;&#x2F;td&gt;&lt;td&gt;OpenAI Hide-and-Seek Findings,&lt;&#x2F;td&gt;&lt;td&gt;startups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;Lilly Singhs Late Night Show I&lt;&#x2F;td&gt;&lt;td&gt;creativity&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Salina Hill&lt;&#x2F;td&gt;&lt;td&gt;Can You Trust Facebook with yo&lt;&#x2F;td&gt;&lt;td&gt;startups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Diego Barton&lt;&#x2F;td&gt;&lt;td&gt;How Netflix Binges and Google&lt;&#x2F;td&gt;&lt;td&gt;creativity&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Earlie Harber&lt;&#x2F;td&gt;&lt;td&gt;The Mystical Side of A.I.&lt;&#x2F;td&gt;&lt;td&gt;technology&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;em&gt;natural join&lt;&#x2F;em&gt; result is affected by the extraction of those rows on the left side of the operator matching by its identifier with those rows to the right of the operator. In the example used, the &lt;em&gt;where&lt;&#x2F;em&gt; clause  tries to satisfy the match condition using the common columns between &lt;em&gt;posts&lt;&#x2F;em&gt; and &lt;em&gt;categories&lt;&#x2F;em&gt;, but the &lt;em&gt;posts.category_id&lt;&#x2F;em&gt;  points to the &lt;em&gt;natural join&lt;&#x2F;em&gt; result of &lt;em&gt;users&lt;&#x2F;em&gt; and &lt;em&gt;posts&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax shown before is not a short version of:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\text{NATURAL JOIN}~r_2~\text{NATURAL JOIN}~...~\text{NATURAL JOIN}~r_m \\&lt;&#x2F;script&gt;
&lt;p&gt;The result of the following query using the referred syntax returns no rows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.name, posts.title, categories.name
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; categories;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason is that the result of the &lt;em&gt;natural join&lt;&#x2F;em&gt; between &lt;em&gt;users&lt;&#x2F;em&gt; and &lt;em&gt;posts&lt;&#x2F;em&gt; contains the columns are &lt;em&gt;user_id&lt;&#x2F;em&gt;, &lt;em&gt;name&lt;&#x2F;em&gt;, &lt;em&gt;post_id&lt;&#x2F;em&gt;, &lt;em&gt;title&lt;&#x2F;em&gt;, &lt;em&gt;words_count&lt;&#x2F;em&gt;, &lt;em&gt;publishing_year&lt;&#x2F;em&gt;, &lt;em&gt;rating&lt;&#x2F;em&gt;, and &lt;em&gt;category_id&lt;&#x2F;em&gt;. While the columns present in a &lt;em&gt;natural join&lt;&#x2F;em&gt; between &lt;em&gt;posts&lt;&#x2F;em&gt; and &lt;em&gt;categories&lt;&#x2F;em&gt; are &lt;em&gt;name&lt;&#x2F;em&gt;, &lt;em&gt;user_id&lt;&#x2F;em&gt;, &lt;em&gt;category_id&lt;&#x2F;em&gt;. A &lt;em&gt;natural join&lt;&#x2F;em&gt; would evidently ask for the column &lt;em&gt;category_id&lt;&#x2F;em&gt; to be present in the &lt;em&gt;users&lt;&#x2F;em&gt; table, which isn&#x27;t. So the query shown above omits all those results where the user doesn&#x27;t have a category_id, resulting in 0 rows.&lt;&#x2F;p&gt;
&lt;p&gt;To get the expected result from the last query we can use the &lt;em&gt;join ... using&lt;&#x2F;em&gt; operation. Which expects one or more columns to be added to the &lt;em&gt;using&lt;&#x2F;em&gt; clause. Then the tables being joined must contain those columns:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.name, posts.title, categories.name
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; (users &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; categories USING (category_id);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The operation:&lt;&#x2F;p&gt;
&lt;p&gt;$$
r_1~\text{join}~\text{using}(A_1,~A_2)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Is similar to the &lt;em&gt;natural join&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
r_1~\text{natural join}~r_2
$$&lt;&#x2F;p&gt;
&lt;p&gt;Except that a pair of rows \( s_1 \) from \( r_1 \) and \( s_2 \) from \( r_2 \) match if \( s_2.A_1 = s_2.A_1 \) and \( s_1.A_2 = s_2.A_2 \). If \( r_1 \) and \( r_2 \) both have a column \( A_3 \). It&#x27;s not mandatory that \( s_1.A_3 = s_2.A_3 \).&lt;&#x2F;p&gt;
&lt;h5 id=&quot;inner-join&quot;&gt;Inner Join&lt;&#x2F;h5&gt;
&lt;p&gt;There are different ways to perform a &lt;em&gt;join&lt;&#x2F;em&gt; as per the SQL Standard. The most used and common is the &lt;em&gt;inner join&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;em&gt;inner join&lt;&#x2F;em&gt; linking the tables &lt;em&gt;users&lt;&#x2F;em&gt; and &lt;em&gt;posts&lt;&#x2F;em&gt; (using the &lt;em&gt;user_id&lt;&#x2F;em&gt; column from both tables) returns only those rows from the table &lt;em&gt;users&lt;&#x2F;em&gt; &amp;quot;linked&amp;quot; with those from the &lt;em&gt;posts&lt;&#x2F;em&gt; table, meaning a link as the match between the value of &lt;em&gt;user_id&lt;&#x2F;em&gt; in both tables. This way all rows that aren&#x27;t able to be linked aren&#x27;t added to the &amp;quot;logical table&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The main part in an &lt;em&gt;inner join&lt;&#x2F;em&gt; is the one that tells the database how to perform the &lt;em&gt;join&lt;&#x2F;em&gt;; the &lt;em&gt;on&lt;&#x2F;em&gt; or &lt;em&gt;using&lt;&#x2F;em&gt; clauses right after the second table in the condition.&lt;&#x2F;p&gt;
&lt;p&gt;The operation is executed first by logically combining every row from the table to the left side of the operator with every row of the table to the right side of the operator - the Cartesian product between both tables. Then it applies the criteria used in the &lt;em&gt;on&lt;&#x2F;em&gt; or &lt;em&gt;using&lt;&#x2F;em&gt; clauses to select those rows that match and return them. The search (or match condition) in  the &lt;em&gt;on&lt;&#x2F;em&gt; clause tells to the &lt;em&gt;join&lt;&#x2F;em&gt; the logical test that must be true to return any two linked rows.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s use the example used in the &lt;em&gt;natural join&lt;&#x2F;em&gt; section:  &amp;quot;Get all users names and post titles from users who have written a post&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; name, title
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;INNER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.user_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts.user_id;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When using multiple tables in a &lt;em&gt;from&lt;&#x2F;em&gt; clause is preferred to always do explicit mention of the tables holding the columns we&#x27;re using. The column &lt;em&gt;name&lt;&#x2F;em&gt; is only present in the &lt;em&gt;users&lt;&#x2F;em&gt; table, as well as the &lt;em&gt;title&lt;&#x2F;em&gt; column only in the &lt;em&gt;posts&lt;&#x2F;em&gt; table, that&#x27;s why in this query isn&#x27;t needed to prefix the table names before the column names. But we will always do this with the &lt;em&gt;on&lt;&#x2F;em&gt; clause.&lt;&#x2F;p&gt;
&lt;p&gt;We can achieve the same result with the &lt;em&gt;using&lt;&#x2F;em&gt; clause. Where we don&#x27;t have to add the table names as the columns prefixes, as it takes the matching pair of the column from both tables:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; name, title
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;INNER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
USING(user_id);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In both cases, the database evaluates the complete &lt;em&gt;join&lt;&#x2F;em&gt; clause before to start retrieving rows. In most of the cases, a row \( a \)  is first fetched from the table to the left side of the operator. Then the database makes use of an internal link (an index if defined) to fastly find any rows in the table to the right side of the operator that matches the row \( a \) before moving to the next row in the current table.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;join-conditions&quot;&gt;Join Conditions&lt;&#x2F;h5&gt;
&lt;p&gt;Besides the &lt;em&gt;natural join&lt;&#x2F;em&gt;, SQL supports a similar kind of join where you can make use of arbitrary conditions.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;em&gt;on&lt;&#x2F;em&gt; condition allows the tables to be joined over a general predicate. The predicate is written like using a &lt;em&gt;where&lt;&#x2F;em&gt; clause predicate, the only difference is the use of the keyword &lt;em&gt;on&lt;&#x2F;em&gt;, instead of &lt;em&gt;where&lt;&#x2F;em&gt;. Similar to the &lt;em&gt;using&lt;&#x2F;em&gt; condition, &lt;em&gt;on&lt;&#x2F;em&gt; is always added at the end of a &lt;em&gt;join&lt;&#x2F;em&gt; expression.&lt;&#x2F;p&gt;
&lt;p&gt;To get all the columns from both users and posts tables where the &lt;em&gt;users.user_id&lt;&#x2F;em&gt; column is equal to the &lt;em&gt;posts.user_id&lt;&#x2F;em&gt; (with a limit of 5 for the sake of brevity) we would use a query like the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.user_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts.user_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff0000;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(the table name prefixes are used to disambiguate the columns used for the match in both tables)&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;user_id&lt;&#x2F;th&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;post_id&lt;&#x2F;th&gt;&lt;th&gt;title&lt;&#x2F;th&gt;&lt;th&gt;words_count&lt;&#x2F;th&gt;&lt;th&gt;publishing_year&lt;&#x2F;th&gt;&lt;th&gt;rating&lt;&#x2F;th&gt;&lt;th&gt;category_id&lt;&#x2F;th&gt;&lt;th&gt;user_id&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Diego B.&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;OpenAI Hide-and-Seek ...&lt;&#x2F;td&gt;&lt;td&gt;1884&lt;&#x2F;td&gt;&lt;td&gt;2017&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Salina H.&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Lilly Singhs Late ...&lt;&#x2F;td&gt;&lt;td&gt;2771&lt;&#x2F;td&gt;&lt;td&gt;2016&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Salina H.&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Can You Trust Facebook ...&lt;&#x2F;td&gt;&lt;td&gt;3519&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Diego B.&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;How Netflix Binges ...&lt;&#x2F;td&gt;&lt;td&gt;2643&lt;&#x2F;td&gt;&lt;td&gt;2018&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Earlie H.&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;The Mystical Side ...&lt;&#x2F;td&gt;&lt;td&gt;2819&lt;&#x2F;td&gt;&lt;td&gt;2016&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;em&gt;on&lt;&#x2F;em&gt; condition in the above query establishes that a row from &lt;em&gt;users&lt;&#x2F;em&gt; matches a row from &lt;em&gt;posts&lt;&#x2F;em&gt; if the value of &lt;em&gt;user_id&lt;&#x2F;em&gt; is equal in both rows. There&#x27;s an evident similarity of the &lt;em&gt;on&lt;&#x2F;em&gt; clause used and the &lt;em&gt;natural join&lt;&#x2F;em&gt; expressions seen before. With the &lt;em&gt;natural join&lt;&#x2F;em&gt; rows in the &lt;em&gt;users&lt;&#x2F;em&gt; table had to match with the ones in the &lt;em&gt;posts&lt;&#x2F;em&gt; table. The result of a &lt;em&gt;join&lt;&#x2F;em&gt; adds twice the column from the condition (first and last columns), while the &lt;em&gt;natural join&lt;&#x2F;em&gt; result doesn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;An alternative to the last query would be using &lt;em&gt;where&lt;&#x2F;em&gt; to check if both columns in each row of both tables match:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#000000;&quot;&gt;SELECT *
FROM users, posts
WHERE users.user_id = posts.user_id;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, the &lt;em&gt;user_id&lt;&#x2F;em&gt; is also twice in the result. To avoid getting unnecessary columns, listing the needed columns is always an option.&lt;&#x2F;p&gt;
&lt;p&gt;Using the &lt;em&gt;on&lt;&#x2F;em&gt; condition allows us to express any SQL predicate, thus using &lt;em&gt;join&lt;&#x2F;em&gt;  expressions with &lt;em&gt;on&lt;&#x2F;em&gt; conditions we get more flexibility while expressing the matching conditions we need.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;on&lt;&#x2F;em&gt; condition might seem useless as we can get a similar join result using &lt;em&gt;where&lt;&#x2F;em&gt; instead of a &lt;em&gt;join ... on&lt;&#x2F;em&gt; operation. But there are two good reasons for the &lt;em&gt;on&lt;&#x2F;em&gt; condition to exist. In an &lt;em&gt;outer join&lt;&#x2F;em&gt; operation, the &lt;em&gt;where&lt;&#x2F;em&gt; conditions don&#x27;t work as seen before. The &lt;em&gt;on&lt;&#x2F;em&gt; clause also offers more readability at the moment of composing queries since is easier to read and understand a query when the &lt;em&gt;on&lt;&#x2F;em&gt; clause holds the &lt;em&gt;join&lt;&#x2F;em&gt; condition, and the rest does it the &lt;em&gt;where&lt;&#x2F;em&gt; clause.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s very common to &lt;em&gt;join&lt;&#x2F;em&gt; tables by using the primary key from one table in conjunction with its foreign key in another table. But this isn&#x27;t mandatory. A &lt;em&gt;join&lt;&#x2F;em&gt; can be performed as long as both columns are of the same data type. Any column of type char can be joined with another column of the same type, as well as integer columns from table \( A \) to an integer column in a table \( B \), and so on.&lt;&#x2F;p&gt;
&lt;p&gt;The latter is perfectly valid but is always up to the user to make them work in a valid context and under the same meaning.&lt;&#x2F;p&gt;
&lt;p&gt;A recommendation when working with &lt;em&gt;join&lt;&#x2F;em&gt;, no matter the number of tables and &lt;em&gt;on&lt;&#x2F;em&gt; conditions being used, it&#x27;s always better to explicitly state the type of &lt;em&gt;join&lt;&#x2F;em&gt; to use and to qualify the used column names with the name of their parents&#x27; tables.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;outer-joins&quot;&gt;Outer Joins&lt;&#x2F;h5&gt;
&lt;p&gt;If we need to get all the users and display all their columns plus the columns from the posts table in case they have written a post, a query like the following should work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But it doesn&#x27;t. If there are users that haven&#x27;t written a post, then the row in the &lt;em&gt;users&lt;&#x2F;em&gt; table corresponding to that user won&#x27;t match the condition of the &lt;em&gt;natural join&lt;&#x2F;em&gt;, which implies the &lt;em&gt;user_id&lt;&#x2F;em&gt; in the row in the table to the left of the operator must match with the &lt;em&gt;user_id&lt;&#x2F;em&gt;  of the row of the table to the right of the operator (in this case by the &lt;em&gt;user_id&lt;&#x2F;em&gt;), thus that row won&#x27;t be taken into account for the result given.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;outer join&lt;&#x2F;em&gt; operation works in a similar way to the &lt;em&gt;join&lt;&#x2F;em&gt; operations, but instead of discarding the rows not matching the specified criteria, it preserves them. It does so by creating rows with &lt;em&gt;NULL&lt;&#x2F;em&gt; values in the result of the operation.&lt;&#x2F;p&gt;
&lt;p&gt;To exemplify, in the latter example there&#x27;s one row from the &lt;em&gt;users&lt;&#x2F;em&gt; table that doesn&#x27;t have any post. That&#x27;s to say, there&#x27;s no row in the &lt;em&gt;posts&lt;&#x2F;em&gt; table with &lt;em&gt;user_id&lt;&#x2F;em&gt; equal to the id of the only user that hasn&#x27;t written a post. So, when executing the query containing the &lt;em&gt;outer join&lt;&#x2F;em&gt;, a row containing all the values from the user that didn&#x27;t write a post is added to the join result. In the same way, all the values corresponding to the columns in the &lt;em&gt;posts&lt;&#x2F;em&gt; table are added to the row created before, but this time with all its values as &lt;em&gt;NULL&lt;&#x2F;em&gt;. This way the row for that user is preserved in the result of the &lt;em&gt;outer join&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;outer-join-forms&quot;&gt;Outer Join forms&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;left outer join&lt;&#x2F;em&gt; preserves only the rows from the table to the left of the operation (&lt;em&gt;left outer join&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;right outer join&lt;&#x2F;em&gt; preserves only the rows from the table to the right of the operation (&lt;em&gt;right outer join&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;full outer join&lt;&#x2F;em&gt; preserves the rows in both tables.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br &#x2F;&gt;
&lt;p&gt;The join operations that don&#x27;t preserve the rows that don&#x27;t match are called &lt;em&gt;inner-join&lt;&#x2F;em&gt; operations. Their exact opposite is called &lt;em&gt;outer-join&lt;&#x2F;em&gt; operations.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;em&gt;outer join&lt;&#x2F;em&gt; first computes its &lt;em&gt;inner join&lt;&#x2F;em&gt; operations in sequential order, then for every row \( a \) in the table to the left of the operator that doesn&#x27;t match any row in the table to the right of the operator in the &lt;em&gt;inner join&lt;&#x2F;em&gt;, it adds a row &lt;em&gt;b&lt;&#x2F;em&gt; to the result of the &lt;em&gt;join&lt;&#x2F;em&gt; following the next rules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All the columns of the &lt;em&gt;b&lt;&#x2F;em&gt; row from the table to the left of the operator have the values of the row &lt;em&gt;a&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;All the remaining columns of &lt;em&gt;b&lt;&#x2F;em&gt; are then &lt;em&gt;NULL&lt;&#x2F;em&gt; values (this depends on the RDBMS being used, PostgreSQL returns an empty column).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The difference between a &lt;em&gt;natural ... outer join&lt;&#x2F;em&gt; and a &lt;em&gt;... outer join ... on&lt;&#x2F;em&gt; is as shown before, they return the same columns and rows, but the last one adds twice the column used for the match condition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *                                   SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users                                 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL LEFT OUTER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts;             &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;LEFT OUTER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts
                                           &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;users.user_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts.user_id;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both &lt;em&gt;left outer join&lt;&#x2F;em&gt; and &lt;em&gt;right outer join&lt;&#x2F;em&gt; are uniform operations. Rows in the right-hand-side table that don&#x27;t match any other row in the left-hand-side table take &lt;em&gt;NULL&lt;&#x2F;em&gt; values and are appended to the result of the &lt;em&gt;right outer join&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The result of a &lt;em&gt;left outer join&lt;&#x2F;em&gt; operation can be achieved from a &lt;em&gt;right outer join&lt;&#x2F;em&gt; if we interchange the order of the tables in the operation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *                                   SELECT *                     
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users                                 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL LEFT OUTER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts;             &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;NATURAL RIGHT OUTER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What differs is just the order in which the columns are listed.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;full-outer-join&quot;&gt;Full Outer Join&lt;&#x2F;h5&gt;
&lt;p&gt;The combination of a &lt;em&gt;left&lt;&#x2F;em&gt; and &lt;em&gt;right&lt;&#x2F;em&gt; &lt;em&gt;outer-join&lt;&#x2F;em&gt; types produces a &lt;em&gt;full outer join&lt;&#x2F;em&gt;. It works similarly to an &lt;em&gt;outer join&lt;&#x2F;em&gt;, but right after the operation computes the result of the inner join, it adds &lt;em&gt;NULL&lt;&#x2F;em&gt; values to those rows from the table to the left side of the operator that doesn&#x27;t match with any row from the table to the right side of the operator, and pushes them to the result of the operation. It does the same with the rows of the table to the right side of the operator that doesn&#x27;t match with any row from the table to the left side of the operator. In the same way, it adds those rows to the result.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of correspondence, both the &lt;em&gt;left outer join&lt;&#x2F;em&gt; and the &lt;em&gt;right outer join&lt;&#x2F;em&gt; can be applied as their &lt;em&gt;union&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As with &lt;em&gt;left&lt;&#x2F;em&gt; and &lt;em&gt;right&lt;&#x2F;em&gt; &lt;em&gt;outer&lt;&#x2F;em&gt; joins, the &lt;em&gt;on&lt;&#x2F;em&gt; clause can be used to control the columns we&#x27;re expecting to match. The &lt;em&gt;on&lt;&#x2F;em&gt; and &lt;em&gt;where&lt;&#x2F;em&gt; clauses have different behavior for &lt;em&gt;outer join&lt;&#x2F;em&gt;. This is because &lt;em&gt;outer join&lt;&#x2F;em&gt; adds rows allowing &lt;em&gt;NULL&lt;&#x2F;em&gt; values for those rows that don&#x27;t match with the criteria specified in an &lt;em&gt;inner join&lt;&#x2F;em&gt;. The &lt;em&gt;join&lt;&#x2F;em&gt; specification incorporates the &lt;em&gt;on&lt;&#x2F;em&gt; condition on its own, but not the &lt;em&gt;where&lt;&#x2F;em&gt; clause.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;joins-and-conditions&quot;&gt;Joins and Conditions&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;em&gt;inner join&lt;&#x2F;em&gt; is the name used to distinguish &amp;quot;normal&amp;quot; &lt;em&gt;joins&lt;&#x2F;em&gt; from &lt;em&gt;outer joins&lt;&#x2F;em&gt;. The &lt;em&gt;inner&lt;&#x2F;em&gt; keyword in an &lt;em&gt;inner join&lt;&#x2F;em&gt; is optional, and thus &lt;em&gt;inner join&lt;&#x2F;em&gt; is just used to emphasize the use of a normal join.&lt;&#x2F;p&gt;
&lt;p&gt;Both following queries are equivalent:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT *                                   SELECT *
FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users                                 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; users
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts USING (user_id);                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;INNER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts USING (user_id);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same equivalence is for &lt;em&gt;natural join&lt;&#x2F;em&gt; and &lt;em&gt;natural inner join&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Any &lt;em&gt;join&lt;&#x2F;em&gt; form can be combined with any condition form, thinking on it as the Cartesian product between &lt;em&gt;join&lt;&#x2F;em&gt; types and &lt;em&gt;join&lt;&#x2F;em&gt; conditions.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;self-join&quot;&gt;Self-Join&lt;&#x2F;h5&gt;
&lt;p&gt;A &lt;em&gt;self-join&lt;&#x2F;em&gt;  is joining a table with itself. It&#x27;s used when a table contains a reference to the same table through the combination of a primary key and a foreign key. Both columns are held within the table being used supported by the referential integrity constraint.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s exemplify by adding a new column to &lt;em&gt;posts&lt;&#x2F;em&gt; which makes mention to the same table to show the post that references the current post:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;ALTER TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;posts ADD COLUMN reference_post_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;INTEGER REFERENCES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts(post_id);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can assign any random post referrer to every post by using the referrer post_id value.&lt;&#x2F;p&gt;
&lt;p&gt;This way we can get all the posts that have been referenced by using an &lt;em&gt;inner join&lt;&#x2F;em&gt; and selecting the &lt;em&gt;title&lt;&#x2F;em&gt; from both tables and distinguishing them by using aliases:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;a.title, b.title 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts a
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;INNER JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; posts b &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;a.post_id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0000ff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;b.reference_post_id;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any possible condition used in a regular &lt;em&gt;join&lt;&#x2F;em&gt; can also be used in a self-join.&lt;&#x2F;p&gt;
&lt;div class=&quot;references&quot;&gt;
  &lt;hr class=&quot;hr-references&quot; &#x2F;&gt;
  &lt;span class=&quot;span-references&quot;&gt;
    References
  &lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;infolab.stanford.edu&#x2F;%7Eullman&#x2F;fcdb&#x2F;aut07&#x2F;slides&#x2F;ra.pdf&quot;&gt;http:&#x2F;&#x2F;infolab.stanford.edu&#x2F;~ullman&#x2F;fcdb&#x2F;aut07&#x2F;slides&#x2F;ra.pdf&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.seas.upenn.edu&#x2F;%7Ezives&#x2F;03f&#x2F;cis550&#x2F;codd.pdf&quot;&gt;https:&#x2F;&#x2F;www.seas.upenn.edu&#x2F;~zives&#x2F;03f&#x2F;cis550&#x2F;codd.pdf&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7870155&#x2F;difference-between-a-theta-join-equijoin-and-natural-join&quot;&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7870155&#x2F;difference-between-a-theta-join-equijoin-and-natural-join&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.pearson.com&#x2F;us&#x2F;higher-education&#x2F;program&#x2F;Viescas-SQL-Queries-for-Mere-Mortals-A-Hands-On-Guide-to-Data-Manipulation-in-SQL-4th-Edition&#x2F;PGM1937355.html&quot;&gt;https:&#x2F;&#x2F;www.pearson.com&#x2F;us&#x2F;higher-education&#x2F;program&#x2F;Viescas-SQL-Queries-for-Mere-Mortals-A-Hands-On-Guide-to-Data-Manipulation-in-SQL-4th-Edition&#x2F;PGM1937355.html&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;9.2&#x2F;queries-table-expressions.html&quot;&gt;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;9.2&#x2F;queries-table-expressions.html&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.db-book.com&#x2F;db7&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.db-book.com&#x2F;db7&#x2F;&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;zeepedia.com&#x2F;toc.php?database_management_systems&amp;amp;b=7&quot;&gt;https:&#x2F;&#x2F;zeepedia.com&#x2F;toc.php?database_management_systems&amp;amp;b=7&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Referential_integrity&quot;&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Referential_integrity&lt;&#x2F;a&gt;
&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_algebra&quot;&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_algebra&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;end-references&quot;&gt;&lt;&#x2F;div&gt;</description>
            </item>
        
    </channel>
</rss>
